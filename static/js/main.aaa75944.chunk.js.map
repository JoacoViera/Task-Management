{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TodoForm","props","onAddTodo","useState","title","setTitle","description","setDescription","priority","setPriority","handleInput","e","target","value","name","console","log","className","onSubmit","preventDefault","alert","type","onChange","placeholder","App","todos","tasks","setTasks","handleTodoTitleColor","toLowerCase","taskComponent","map","todo","i","key","style","fontWeight","ml-2","toUpperCase","fontSize","onClick","t","filter","h","href","length","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaa75944.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from \"react\";\r\n\r\nconst TodoForm = (props) => {\r\n  const { onAddTodo } = props;\r\n  const [title, setTitle] = useState('');\r\n  const [description, setDescription] = useState('');\r\n  const [priority, setPriority] = useState('Low');\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (!title) {\r\n      alert(\"PLEASE ADD A TITTLE\");\r\n    } else if (!description) {\r\n      alert(\"PLEASE ADD A DESCRIPTION\");\r\n    } else {\r\n      onAddTodo(\r\n        {\r\n          \"title\": title,\r\n          \"description\": description,\r\n          \"priority\": priority\r\n        }\r\n      );\r\n      e.target.title.value = '';\r\n      e.target.description.value = '';\r\n      e.target.priority.value = 'Low';\r\n    }\r\n  }\r\n\r\n\r\n  const handleInput = (e) => {\r\n    const { value, name } = e.target;\r\n    if (name === 'title') {\r\n      setTitle(value)\r\n    } else if (name === 'description') {\r\n      setDescription(value);\r\n    } else if (name === 'priority') {\r\n      setPriority(value)\r\n    } else {\r\n      console.log('error');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <form className=\"card-body\" onSubmit={handleSubmit}>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            onChange={handleInput}\r\n            className=\"form-control\"\r\n            placeholder=\"Title\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            name=\"description\"\r\n            onChange={handleInput}\r\n            className=\"form-control\"\r\n            placeholder=\"Description\"\r\n          />\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <select\r\n            name=\"priority\"\r\n            className=\"form-control\"\r\n            onChange={handleInput}\r\n          >\r\n            <option>Low</option>\r\n            <option>Medium</option>\r\n            <option>High</option>\r\n          </select>\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">\r\n          Save\r\n          </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\n\r\nimport TodoForm from \"./components/TodoForm\";\r\nimport { todos } from \"./todos.json\";\r\n\r\n\r\nconst App = (props) => {\r\n\r\n  const [tasks, setTasks] = useState(todos);\r\n\r\n  const handleAddTodo = (todo) => {\r\n    setTasks([...tasks, todo]);\r\n  }\r\n\r\n  const handleTodoTitleColor = (priority) => {\r\n    let className = \"badge badge-pill badge-\";\r\n    if (priority.toLowerCase() === \"low\") {\r\n      return className += \"success\";\r\n    } else if (priority.toLowerCase() === \"medium\") {\r\n      return className += \"warning\";\r\n    } else {\r\n      return className += \"danger\";\r\n    }\r\n  }\r\n\r\n  const taskComponent = tasks.map((todo, i) => {\r\n    return (\r\n      <div className=\"col-md-4\" key={i}>\r\n        <div className=\"card mt-4\">\r\n          <div className=\"card-header bg-info\">\r\n            <h3 style={{ fontWeight: \"bold\" }}>{todo.title}</h3>\r\n            <span className={handleTodoTitleColor(todo.priority)} ml-2>\r\n              {todo.priority.toUpperCase()}\r\n            </span>\r\n          </div>\r\n          <div className=\"card-header bg-light\">\r\n            <p style={{ fontSize: 23 }}>{todo.description}</p>\r\n            {/* <p>\r\n              <mark>{todo.responsible}</mark>\r\n            </p> */}\r\n          </div>\r\n          <div className=\"card-footer\">\r\n            <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => {\r\n                // Delete without confirmation\r\n                // if (window.confirm(\"Are you sure you want to delete it?\")) {\r\n                //   let t = tasks.filter((e, h) => { return i !== h; });\r\n                //   setTasks(t);\r\n                // }\r\n                // Delete without confirmation\r\n                let t = tasks.filter((e, h) => { return i !== h; });\r\n                setTasks(t);\r\n              }}\r\n            >\r\n              Delete\r\n              </button>\r\n          </div>\r\n        </div>\r\n      </div >\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <nav className=\"navbar navbar-dark bg-dark\">\r\n        <a href=\"https://www.google.com\" className=\"text-white\">\r\n          Tasks\r\n            <span className=\"badge badge-pill badge-light ml-2\">\r\n            {tasks.length}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n\r\n      <div className=\"container\">\r\n        <div className=\"row mt-4\">\r\n          <div className=\"col-md-3\">\r\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n            <TodoForm onAddTodo={handleAddTodo} />\r\n          </div>\r\n          <div className=\"col-md-9\">\r\n            <div className=\"row\">{taskComponent}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}